name: choc

run-name: chocolatine ${{ github.repository }}

on:
  push:
    branches-ignore:
      - 'ga-ignore-**'
  pull_request:
    branches-ignore:
      - 'ga-ignore-**'

env:
  EXECUTABLES: "nanotekspice"
  TESTS_EXECUTABLES: "unit_tests"

jobs:

  verif_repo:
    runs-on: ubuntu-latest
    outputs:
      is_mirror_repo: ${{ steps.set_condition.outputs.is_mirror }}
    steps:
      - name: Check repo type
        id: set_condition
        run: |
          # Debug: Afficher les valeurs brutes
          echo "MIRROR_URL: ${{ secrets.MIRROR_URL }}"
          echo "Current repo: ${{ github.repository }}"

          # Extraction robuste du nom du dépôt miroir
          if [[ "${{ secrets.MIRROR_URL }}" =~ (git@github.com:|https:\/\/github.com\/)([^/]+\/[^/.]+) ]]; then
              REPO_NAME="${BASH_REMATCH[2]}"
              REPO_NAME_LOWER=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')
              CURRENT_REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')

              echo "Mirror repo: $REPO_NAME_LOWER"
              echo "Current repo: $CURRENT_REPO_LOWER"

              if [ "$REPO_NAME_LOWER" == "$CURRENT_REPO_LOWER" ]; then
                  echo "is_mirror=true" >> $GITHUB_OUTPUT
                  echo "🟢 Ceci est le dépôt miroir"
              else
                  echo "is_mirror=false" >> $GITHUB_OUTPUT
                  echo "🔴 Ceci est le dépôt source"
              fi
          else
              echo "❌ Format de MIRROR_URL invalide"
              echo "is_mirror=false" >> $GITHUB_OUTPUT
          fi

  check_coding_style:
    needs: verif_repo
    if: needs.verif_repo.outputs.is_repo == 'false'
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check coding style
        run: check.sh $(pwd) $(pwd)

      - name: Display errors
        run: |
          if [ ! -s coding-style-reports.log ]; then
            echo "::notice title=No coding style error found::"
          else
            while read line; do
              FILE=$(echo "$line" | cut -d':' -f1)
              LINE=$(echo "$line" | cut -d':' -f2)
              ERROR=$(echo "$line" | cut -d':' -f4)
              echo "::error file=$FILE,line=$LINE::$ERROR"
            done < coding-style-reports.log
            exit 1
          fi

  check_program_compilation:
    needs: [verif_repo, check_coding_style]
    if: needs.verif_repo.outputs.is_repo == 'false'
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compilation
        run: make
        timeout-minutes: 2

      - name: Clean
        run: make clean

      - name: Check executables
        run: |
          for exe in $(echo "${{ env.EXECUTABLES }}" | tr ' ' '\n'); do
            if [ ! -f "$exe" ]; then
              echo "::error file=$exe::Executable $exe missing"
              exit 1
            fi
          done

  run_tests:
    needs: [verif_repo, check_program_compilation]
    if: needs.verif_repo.outputs.is_repo == 'false'
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run tests
        run: make tests_run
        timeout-minutes: 2

      - name: Clean
        run: make clean

      - name: Verify test executables
        run: |
          for exe in $(echo "${{ env.TESTS_EXECUTABLES }}" | tr ' ' '\n'); do
            if [ ! -x "$exe" ]; then
              echo "::error file=$exe::Test executable $exe missing"
              exit 1
            fi
          done

  push_to_mirror:
    needs: [verif_repo, run_tests]
    if: |
      github.event_name == 'push' &&
      needs.verif_repo.outputs.is_repo == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ secrets.MIRROR_URL }}
          ssh_private_key: ${{ secrets.ORG_DEPLOY_KEY }}