name: chocolatine

run-name: chocolatine ${{ github.repository }}

on:
  push:
    branches-ignore:
      - 'ga-ignore-**'
  pull_request:
    branches-ignore:
      - 'ga-ignore-**'

env:
  EXECUTABLES: "nanotekspice"
  TESTS_EXECUTABLES: "unit_tests"

jobs:

  verif_repo:
    runs-on: ubuntu-latest
    outputs:
      is_repo: ${{ steps.set_condition.outputs.is_repo }}
    steps:
      - name: Check if repo is the right one
        id: set_condition
        run: |
          echo "${{ secrets.MIRROR_URL }}"
          REPO_NAME=$(echo "${{ secrets.MIRROR_URL }}" | sed -E 's/.*:([^\/]+)\/(.+)\.git/\1\/\2/')
          echo "Parsed repo name: $REPO_NAME"
          if [ "${{ github.repository }}" = "$REPO_NAME" ] || [ "$REPO_NAME" = "" ]; then
            echo "is_repo=true" >> $GITHUB_ENV
            echo "is_repo=true" >> $GITHUB_OUTPUT
            echo "${{ github.repository }} is the right repo"
            echo "Debug: github.repository=${{ github.repository }}, REPO_NAME=$REPO_NAME"
          else
            echo "is_repo=false" >> $GITHUB_ENV
            echo "is_repo=false" >> $GITHUB_OUTPUT
            echo "${{ github.repository }} is not the right repo"
            echo "Debug: github.repository=${{ github.repository }}, REPO_NAME=$REPO_NAME"
          fi

  check_coding_style:
    needs: verif_repo
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check coding style
        run: check.sh $(pwd) $(pwd)

      - name: Display errors
        run: |
          if [ ! -s coding-style-reports.log ]; then
            echo "::notice title=No coding style error found::"
          else
            cat coding-style-reports.log | while read line; do
              ERROR_CODE=$(echo $line | cut -d':' -f 4)
              echo "$ERROR_CODE"
              ERROR_TYPE=$(echo $line | cut -d':' -f 3)
              LINE=$(echo $line | cut -d':' -f 2)
              FILE=$(echo $line | cut -d':' -f 1)
              echo "file=$FILE line=$LINE $ERROR_CODE"
              TITLE=$(echo $ERROR_TYPE coding style error)
              echo "::error title=$TITLE,file=$FILE,line=$LINE::$ERROR_CODE"
            done
            exit 1
          fi

  check_program_compilation:
    needs: verif_repo
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compilation
        run: make
        timeout-minutes: 2

      - name: clean
        run: make clean

      - name: check executables exist
        run: |
          for exe in $(echo "${{ env.EXECUTABLES }}" | tr ',' '\n'); do
            if [ ! -x "$exe" ]; then
              echo "::error::Executable $exe does not exist"
              exit 1
            else
              echo "::notice::Executable $exe exists"
            fi
          done

  run_tests:
    needs: verif_repo
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run tests
        run: make tests_run
        timeout-minutes: 2

      - name: clean
        run: make clean

      - name: check test executable exists
        run: |
          for exe in $(echo "${{ env.TESTS_EXECUTABLES }}" | tr ',' '\n'); do
            if [ ! -x "$exe" ]; then
              echo "::error::Executable $exe does not exist"
              exit 1
            else
              echo "::notice::Test Executable $exe exists"
            fi
          done

  push_to_mirror:
    needs: [run_tests, check_program_compilation, check_coding_style, verif_repo]
    if: needs.verif_repo.outputs.is_repo == 'false' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Push to mirror
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ secrets.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.ORG_DEPLOY_KEY }}